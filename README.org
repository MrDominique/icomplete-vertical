* icomplete-vertical

This package defines a global minor mode to display Icomplete
completion candidates vertically.  You could get a vertical display
without this package, by using =(setq icomplete-separator "\n")=, but
that has two problems which =icomplete-vertical-mode= solves:

1. Usually the minibuffer prompt and the text you type scroll off
   to the left!  This conceals the minibuffer prompt, and worse,
   the text you enter.

2. The first candidate appears on the same line as the one you are
   typing in. This makes it harder to visually scan the candidates
   as the first one starts in a different column from the others.

The screenshots below explain this better than words can.

* Installation and usage

For now, put =icomplete-vertical.el= somewhere in your =load-path=, and
=require= it. Turn the minor mode on or off with =M-x
icomplete-vertical-mode=. It only does something when =icomplete-mode= is
also active.

Personally, I can't decide whether I prefer icomplete horizontally or
vertically, so I bound =icomplete-vertical-mode= to a key and go back
and forth indecisively ---you can even toggle it during a minibuffer
completion session.

You can configure how tall you want the minibuffer during completion
by customizing the variable =icomplete-vertical-prospects-height=. This
is a separate variable from =icomplete-prospects-height= because if you
use icomplete both horizontally and vertically you are likely to want
different values for the two settings.

* Screenshots

This is what =describe-function= looks like in =icomplete-vertical-mode=
(with Protesilaos Stavrou's [[https://gitlab.com/protesilaos/modus-themes][lovely modus-operandi theme]]):

[[images/describe-function-vertical.png]]

For comparison this is what you get without this package, simply
setting =icomplete-separator= to a newline:

[[images/describe-function-just-sep.png]]

Notice the missing prompt and text typed so far (=icom=), and how the
first candidate (=icomplete-tidy=) is on the line where you type.
