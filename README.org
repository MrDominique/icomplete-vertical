* icomplete-vertical

This package defines a global minor mode to display Icomplete
completion candidates vertically.  You could get a vertical display
without this package, by using =(setq icomplete-separator "\n")=, but
that has two problems which =icomplete-vertical-mode= solves:

1. Usually the minibuffer prompt and the text you type scroll off
   to the left!  This conceals the minibuffer prompt, and worse,
   the text you enter.

2. The first candidate appears on the same line as the one you are
   typing in. This makes it harder to visually scan the candidates
   as the first one starts in a different column from the others.

The screenshots explain this better than words can.

* Screenshots

This is what =describe-function= looks like in =icomplete-vertical-mode=
(with Protesilaos Stavrou's [[https://gitlab.com/protesilaos/modus-themes][lovely modus-operandi theme]]):

[[images/describe-function-vertical.png]]

For comparison this is what you get /without/ this package, simply
setting =icomplete-separator= to a newline:

[[images/describe-function-just-sep.png]]

Notice the missing prompt and text typed so far (=icom=), and how the
first candidate (=icomplete-tidy=) is on the line where you type.

* Installation and usage

For now, put =icomplete-vertical.el= somewhere in your =load-path=, and
=require= it. Turn the minor mode on or off with =M-x
icomplete-vertical-mode=. It only does something when =icomplete-mode= is
also active.

You might also want to bind =icomplete-vertical-toggle= to some key in
the =icomplete-minibuffer-map= keymap. I use =C-v=, for "vertical", since
paging in the minibuffer isn't very useful. (Running
=icomplete-vertical-toggle= has the same toggling effect as running
=icomplete-vertical-mode=, except that it doesn't print a message in the
echo area disturbing your candidate display until the next keypress.)

* About Icomplete

This package is meant to be used in conjunction with Icomplete, which
is a built-in Emacs completion UI (similar to Ido) that provides a
display of the completion candidates and interactive narrowing.
Icomplete has several configuration options but even just sticking
=(icomplete-mode)= in your init file is enough to make it useful. The
documentation that comes with Emacs is a little sparse (see =(info
"(Emacs)Icomplete")=), so for a demo and longer introduction see
Protesilaos Stavrou's [[https://youtu.be/vtwYIKUZwEM][icomplete video]].

Icomplete is a UI for the built-in completion system in Emacs which is
very customizable and has various styles of matching candidates
(notably including =flex= completion starting from Emacs 27). See the
Completion section of the manual, particularly the subsections =(info
"(Emacs)Completion Styles")= and =(info "(Emacs)Completion Options")=.

* Configuration for icomplete-vertical

** Maximum minibuffer height

The maximum number of lines you want to use to display candidates
during completion is determined by the variable
=icomplete-vertical-prospects-height=, which you can customize. This was
made a separate variable from =icomplete-prospects-height= because if
you use icomplete both horizontally and vertically you are likely to
want different values for the two settings.

** Fixed or variable height minibuffer

You can control whether the minibuffer has a fixed height or grows and
shrinks as the number of candidates changes while using
=icomplete-vertical-mode= completion. This is controlled by the
value  of the standard Emacs variable =resize-mini-windows= at the time
=icomplete-vertical-mode= is activated.

If =resize-mini-windows= is set to =t=, then the minibuffer will grow and
shrink depending on the number of candidates ---up to a maximum of
=icomplete-vertical-prospects-height= lines of candidates.

On the other hand, if =resize-mini-windows= is set to any other value
(either =nil= or =grow-only=) then =icomplete-vertical-mode= will keep the
height fixed at =icomplete-vertical-prospects-height= lines of
candidates.

** Defining your own vertical commands

If you want to use Icomplete horizontally most of the time but want to
define a few commands which you always want to start in
=icomplete-vertical-mode=, use the =icomplete-vertical-do= macro.

A typical example is a command to select an item from the kill-ring
using completion and insert it into the current buffer. Since often
kill-ring entries are multiline we'll want (1) the completion to start
in vertical mode, (2) the number of lines used to display entries to
be relatively large, and (3) the separator to be, say, a horizontal
line:

#+begin_src emacs-lisp
  (defun insert-kill-ring-item ()
    "Insert item from kill-ring, selected with completion."
    (interactive)  
    (icomplete-vertical-do (:separator "\n——————————\n" :height 20)
      (insert (completing-read "Yank: " kill-ring nil t))))
#+end_src

Note that the completion merely /starts out/ in vertical mode: nothing
keeps you from toggling between vertical and horizontal while
=insert-kill-ring-item= is active. Once the command finishes running,
your previous completion configuration will be restored.

Both the =:separator= and =:height= are optional and default to a single
newline and to =icomplete-vertical-prospects-height=, respectively. The
separator should of course contain at least one newline, and it can have
text properties which control the display ---for example, you can apply
a different face to it.

This packages only contains the =icomplete-vertical-do= macro for your
own use, it does not predefine any commands that use it.
